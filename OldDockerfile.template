# Base this on ResinIO's rpi-raspbian image.
FROM resin/rpi-raspbian:stretch

# Allow overriding the OpenCV version to build.
ARG opencv_version=3.4.1

# Informative labels.
LABEL description="Docker container for Python OpenCV + OpenCV contrib on a Raspberry Pi.  Based on ResinIO's rpi-raspbian image and includes support for both Python 2 and 3.  OpenCV is compiled with ARM NEON optimizations as described in: https://www.pyimagesearch.com/2017/10/09/optimizing-opencv-on-the-raspberry-pi/  Note this takes about 1.5 hours to build from scratch on a Pi 3."
LABEL maintainer="tony@tonydicola.com"

# Install dependencies and clean-up apt sources.
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    gfortran \
    libatlas-base-dev \
    libavcodec-dev \
    libavformat-dev \
    libavresample-dev \
    libcanberra-gtk* \
    libgtk2.0-dev \
    libgtk-3-dev \
    libjasper-dev \
    libjpeg-dev \
    libpng-dev \
    libraspberrypi-dev \
    libswscale-dev \
    libtiff5-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    pkg-config \
    python \
    python3-dev \
    unzip \
    wget \
  && rm -rf /var/lib/apt/lists/*

# Download OpenCV sources to /opt folder
WORKDIR /opt
RUN wget -O opencv.zip https://github.com/opencv/opencv/archive/${opencv_version}.zip \
    && unzip opencv.zip
RUN wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/${opencv_version}.zip \
    && unzip opencv_contrib.zip

# Install pip and numpy for both Python 2 and 3.
RUN wget https://bootstrap.pypa.io/get-pip.py
RUN python3 get-pip.py \
    && pip3 install numpy

# Run OpenCV's cmake and configure it with ARM optimizations.
WORKDIR /opt/opencv-${opencv_version}/build
RUN cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D OPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib-${opencv_version}/modules \
    -D ENABLE_NEON=ON \
    -D ENABLE_VFPV3=ON \
    -D BUILD_TESTS=OFF \
    -D INSTALL_PYTHON_EXAMPLES=OFF \
    -D BUILD_EXAMPLES=OFF ..

# Run main compile with 4 processes (best for the Pi 3).
RUN make -j4 \
    && make install \
    && make clean

# Default to running the Python 3 interpreter command.
WORKDIR /

ENV READTHEDOCS True

# Copy requirements.txt first for better cache on later pushes
COPY ./requirements.txt /requirements.txt

# pip install python deps from requirements.txt on the resin.io build server
RUN pip install -r /requirements.txt

# This will copy all files in our root to the working  directory in the container
COPY . ./

RUN sudo usermod -a -G video $(whoami)

# switch on systemd init system in container
ENV INITSYSTEM on

# main.py will run when container starts up on the device
CMD ["python3","-u","watcher/mjpgStreamMinCamera.py"]